<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>书巢</title>
  
  <subtitle>故知一死生为虚诞，齐彭殇为妄作。</subtitle>
  <link href="http://rmchz.github.io/atom.xml" rel="self"/>
  
  <link href="http://rmchz.github.io/"/>
  <updated>2021-11-25T01:49:56.124Z</updated>
  <id>http://rmchz.github.io/</id>
  
  <author>
    <name>书巢主人</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>聚簇索引的消失</title>
    <link href="http://rmchz.github.io/2021/11/25/%E8%81%9A%E7%B0%87%E7%B4%A2%E5%BC%95%E7%9A%84%E6%B6%88%E5%A4%B1/"/>
    <id>http://rmchz.github.io/2021/11/25/%E8%81%9A%E7%B0%87%E7%B4%A2%E5%BC%95%E7%9A%84%E6%B6%88%E5%A4%B1/</id>
    <published>2021-11-25T00:51:27.000Z</published>
    <updated>2021-11-25T01:49:56.124Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>本文主要是为了探讨聚簇索引的消失，起因是笔者和某个“友善度”技术面试官进行的愉快对话。</p><p>首先确认两个概念的定义。<br><strong>聚簇索引</strong>（Clustered Index）是MySQL中InnoDB的特殊索引，用来存储行数据。一般来说，聚簇索引和主键（primary key）是同义词（来源）。<br><strong>二级索引</strong>（Secondary Index）,在Mysql的InnoDB中，二级索引指除了聚簇索引之外的所有索引。在InnoDB的二级索引记录中包含了所有的主键列（主键可以包含多个列），以及二级索引指定的列（一个或者多个）。并且InnoDB使用主键的值搜索聚簇索引的行。</p><p>按照官方文档，聚簇索引的创建有三种情况：</p><ol><li>创建表时，若定义了主键，那么主键就是聚簇索引；</li><li>如果表没有定义主键，则引擎会使用第一个索引列不是空的Unique索引作为聚簇索引；</li><li>若是没有主键和合适的唯一索引。InnoDB就会自动的生成一个被隐藏的聚簇索引，名叫“GEN_CLUST_INDEX”。该索引包含一个列，其列一个合成列，其中包含每行数据的“row ID”的值（6-bytes）。注意，“row ID” 是由InnoDB引擎生成并插入的，“row ID”的从小到大的顺序就是数据插入的顺序。</li></ol><p>此处就引申出了一个问题：当对某个具有“GEN_CLUST_INDEX”的表添加主键或二级索引的时候，表的索引会发生什么变化？<br>本次实验的目的就是为了找到这个问题的答案。</p><hr><h2 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h2><p>实验环境：MySQL 5.7.33；<br>实验用表：”test_index”。</p><p>此处测试表表名是“index_test”，其创建语句为：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SET</span> NAMES utf8mb4;</span><br><span class="line"><span class="keyword">SET</span> FOREIGN_KEY_CHECKS <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"><span class="comment">-- ----------------------------</span></span><br><span class="line"><span class="comment">-- Table structure for index_test</span></span><br><span class="line"><span class="comment">-- ----------------------------</span></span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> IF <span class="keyword">EXISTS</span> `index_test`;</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `index_test`  (</span><br><span class="line">  `sss` <span class="type">varchar</span>(<span class="number">255</span>) <span class="type">CHARACTER</span> <span class="keyword">SET</span> utf8 <span class="keyword">COLLATE</span> utf8_general_ci <span class="keyword">not</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `ccc` <span class="type">varchar</span>(<span class="number">255</span>) <span class="type">CHARACTER</span> <span class="keyword">SET</span> utf8 <span class="keyword">COLLATE</span> utf8_general_ci  <span class="keyword">NULL</span>  <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span></span><br><span class="line">) ENGINE <span class="operator">=</span> InnoDB <span class="type">CHARACTER</span> <span class="keyword">SET</span> <span class="operator">=</span> utf8 <span class="keyword">COLLATE</span> <span class="operator">=</span> utf8_general_ci ROW_FORMAT <span class="operator">=</span> <span class="keyword">Dynamic</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">SET</span> FOREIGN_KEY_CHECKS <span class="operator">=</span> <span class="number">1</span>;</span><br></pre></td></tr></table></figure><h2 id="测试表有两列，分别是sss（不能为空）和ccc（默认为空）。"><a href="#测试表有两列，分别是sss（不能为空）和ccc（默认为空）。" class="headerlink" title="测试表有两列，分别是sss（不能为空）和ccc（默认为空）。"></a>测试表有两列，分别是sss（不能为空）和ccc（默认为空）。</h2><h2 id="开始"><a href="#开始" class="headerlink" title="开始"></a>开始</h2><p>首先，既然是隐藏聚簇索引，使用普通的 show index from ‘table_name’的命令自然是看不到聚簇索引的。<br>可使用下述语句查看聚簇索引的名称（<a href="https://stackoverflow.com/questions/54446161/innodb-find-clustered-index-in-existing-table">来源</a>）：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> t.name <span class="keyword">as</span> table_name, i.name <span class="keyword">as</span> index_name</span><br><span class="line">  <span class="keyword">from</span> information_schema.innodb_sys_tables t</span><br><span class="line">  <span class="keyword">join</span> information_schema.innodb_sys_indexes i <span class="keyword">using</span> (table_id)</span><br><span class="line">  <span class="keyword">where</span> i.name <span class="operator">=</span> <span class="string">&#x27;GEN_CLUST_INDEX&#x27;</span> <span class="keyword">and</span> t.name <span class="keyword">like</span> <span class="string">&#x27;%index_test%&#x27;</span>;</span><br></pre></td></tr></table></figure><p>下面是测试表创建后，并没有添加任何约束时，上述语句执行后的结果：<br><img src="/img//%E8%81%9A%E7%B0%87%E7%B4%A2%E5%BC%95%E7%9A%84%E6%B6%88%E5%A4%B1/1.png" alt="header"><br>可以观察到结果中存在默认聚簇索引索引，结果符合预期。</p><h2 id="实验"><a href="#实验" class="headerlink" title="实验"></a>实验</h2><p>下面进行两个实验。<br>实验一：创建一个二级索引，观察索引表的变化。<br>实验二：创建一个主键，观察索引表的变化。</p><h3 id="实验一"><a href="#实验一" class="headerlink" title="实验一"></a>实验一</h3><h4 id="1-1-UNIQUE-索引非空列"><a href="#1-1-UNIQUE-索引非空列" class="headerlink" title="1.1 UNIQUE 索引非空列"></a>1.1 UNIQUE 索引非空列</h4><p>使用以下语句创建一个二级索引，</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">table</span> index_test <span class="keyword">add</span> <span class="keyword">UNIQUE</span> INDEX (sss);</span><br></pre></td></tr></table></figure><p>注意,此处创建的是UNIQUE索引，并且索引包含的列“sss”是不为空的。<br>创建完成之后，查看修改后的索引变化再查看索引：<br><img src="/img//%E8%81%9A%E7%B0%87%E7%B4%A2%E5%BC%95%E7%9A%84%E6%B6%88%E5%A4%B1/2.png" alt="header"></p><p>可以观察到默认的聚簇索引“GEN_CLUST_INDEX”已经消失，符合<a href="https://dev.mysql.com/doc/refman/5.7/en/innodb-index-types.html">官方的表述</a>：</p><blockquote><p> If you do not define a PRIMARY KEY for a table, InnoDB uses the first UNIQUE index with all key columns defined as NOT NULL as the clustered index.</p></blockquote><h4 id="1-2-UNIQUE-索引默认为空的列"><a href="#1-2-UNIQUE-索引默认为空的列" class="headerlink" title="1.2 UNIQUE 索引默认为空的列"></a>1.2 UNIQUE 索引默认为空的列</h4><p>使用以下语句创建一个主键，注意此处的索引列“ccc”默认为空。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">table</span> index_test <span class="keyword">add</span> <span class="keyword">UNIQUE</span> INDEX(ccc);</span><br></pre></td></tr></table></figure><p>查看对应索引，结果如下：<br><img src="/img//%E8%81%9A%E7%B0%87%E7%B4%A2%E5%BC%95%E7%9A%84%E6%B6%88%E5%A4%B1/3.png" alt="header"></p><p>可以观察到，GEN_CLUST_INDEX并没有消失。</p><h4 id="1-3-UNIQUE索引混合列"><a href="#1-3-UNIQUE索引混合列" class="headerlink" title="1.3 UNIQUE索引混合列"></a>1.3 UNIQUE索引混合列</h4><p>使用以下语句创建一个主键，注意此处的索引列“ccc”默认为空，“sss”默认非空。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">table</span> index_test <span class="keyword">add</span> <span class="keyword">UNIQUE</span> INDEX(sss,ccc);</span><br></pre></td></tr></table></figure><p>查看对应索引，结果如下：<br><img src="/img//%E8%81%9A%E7%B0%87%E7%B4%A2%E5%BC%95%E7%9A%84%E6%B6%88%E5%A4%B1/4.png" alt="header"></p><p>可以观察到，“GEN_CLUST_INDEX”并没有消失。</p><h4 id="1-4-普通索引，非空列"><a href="#1-4-普通索引，非空列" class="headerlink" title="1.4 普通索引，非空列"></a>1.4 普通索引，非空列</h4><p>添加索引</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">table</span> index_test <span class="keyword">add</span> index (sss);</span><br></pre></td></tr></table></figure><p>查看对应索引，结果如下：<br><img src="/img//%E8%81%9A%E7%B0%87%E7%B4%A2%E5%BC%95%E7%9A%84%E6%B6%88%E5%A4%B1/5.png" alt="header"></p><p>“GEN_CLUST_INDEX”并没有消失。</p><h4 id="1-5-普通索引，混合列"><a href="#1-5-普通索引，混合列" class="headerlink" title="1.5 普通索引，混合列"></a>1.5 普通索引，混合列</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">table</span> index_test <span class="keyword">add</span> index normMixIdx(sss,ccc);</span><br></pre></td></tr></table></figure><p>结果：<br><img src="/img//%E8%81%9A%E7%B0%87%E7%B4%A2%E5%BC%95%E7%9A%84%E6%B6%88%E5%A4%B1/6.png" alt="header"></p><h3 id="实验二："><a href="#实验二：" class="headerlink" title="实验二："></a>实验二：</h3><p>使用以下语句创建一个主键，注意此处的索引列“ccc”默认为空。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">table</span> index_test <span class="keyword">add</span> <span class="keyword">PRIMARY</span> (sss);</span><br></pre></td></tr></table></figure><p>查看表中索引,结果如下：<br><img src="/img//%E8%81%9A%E7%B0%87%E7%B4%A2%E5%BC%95%E7%9A%84%E6%B6%88%E5%A4%B1/7.png" alt="header"></p><p>可以发现默认的聚簇索已经“GEN_CLUST_INDEX”消失了。</p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>由上述实验可知，只有在两种情况下默认的聚簇索引“GEN_CLUST_INDEX”会消失，与<a href="https://dev.mysql.com/doc/refman/5.7/en/innodb-index-types.html">官方文档</a>描述一致。</p><ul><li>表中存在主键（Primary Key）。</li><li>表中存在唯一索引（Unique Index），且唯一索引的列都是非空。</li></ul><p>PS：也不知道为什么做那么无聊的实验，文档已经写的很明白了。</p><p>本实验有些不严谨的地方，比如：没有枚举各种数据类型和约束（空或非空）的组合构成的索引。</p><h1 id="Extra"><a href="#Extra" class="headerlink" title="Extra"></a>Extra</h1><p>Q：如果需要删除当前聚簇索引并创建新的聚簇索引该怎么办？<br>A：幸运的是，这个问题已经有了答案：<a href="https://stackoverflow.com/questions/60488690/how-to-drop-a-clustered-index-on-a-table-if-it-exists-and-add-a-new-clustered-in">link</a>。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;本文主要是为了探讨聚簇索引的消失，起因是笔者和某个“友善度”技术面试官进行的愉快对话。&lt;/p&gt;
&lt;p&gt;首先确认两个概念的定义。&lt;br&gt;&lt;st</summary>
      
    
    
    
    <category term="Backend" scheme="http://rmchz.github.io/categories/Backend/"/>
    
    <category term="MySQL" scheme="http://rmchz.github.io/categories/Backend/MySQL/"/>
    
    
    <category term="MySQL" scheme="http://rmchz.github.io/tags/MySQL/"/>
    
    <category term="聚簇索引" scheme="http://rmchz.github.io/tags/%E8%81%9A%E7%B0%87%E7%B4%A2%E5%BC%95/"/>
    
    <category term="索引" scheme="http://rmchz.github.io/tags/%E7%B4%A2%E5%BC%95/"/>
    
    <category term="二级索引" scheme="http://rmchz.github.io/tags/%E4%BA%8C%E7%BA%A7%E7%B4%A2%E5%BC%95/"/>
    
    <category term="Secondary Index" scheme="http://rmchz.github.io/tags/Secondary-Index/"/>
    
    <category term="Clustered Index" scheme="http://rmchz.github.io/tags/Clustered-Index/"/>
    
    <category term="GEN_CLUST_INDEX" scheme="http://rmchz.github.io/tags/GEN-CLUST-INDEX/"/>
    
  </entry>
  
  <entry>
    <title>关于TCP粘包</title>
    <link href="http://rmchz.github.io/2021/06/17/%E5%85%B3%E4%BA%8ETCP%E7%B2%98%E5%8C%85/"/>
    <id>http://rmchz.github.io/2021/06/17/%E5%85%B3%E4%BA%8ETCP%E7%B2%98%E5%8C%85/</id>
    <published>2021-06-17T07:20:12.000Z</published>
    <updated>2021-06-17T07:40:09.358Z</updated>
    
    <content type="html"><![CDATA[<p>首先要确定一个问题，什么是<strong>粘包</strong>？下面是某博客关于<strong>粘包</strong>的描述：</p><h4 id="“TCP粘包就是指发送方发送的若干包数据到达接收方时粘成了一包。”-1"><a href="#“TCP粘包就是指发送方发送的若干包数据到达接收方时粘成了一包。”-1" class="headerlink" title="“TCP粘包就是指发送方发送的若干包数据到达接收方时粘成了一包。”[1]"></a>“TCP粘包就是指发送方发送的若干包数据到达接收方时粘成了一包。”[1]</h4><p>也就是说，存在一个TCP数据包，每一次TCP请求就会发送一个数据包。当这些TCP包内容太少（即包太小）的时候，TCP的实现就会将许多数据包拼到一起，在接收方看来就是一个包。</p><p>实际这是<strong>错误</strong>的。<br>首先需要明确的一点是：TCP是一个<strong>流式传输协议</strong>。即在使用TCP执行了<strong>发送消息</strong>这一动作之后，消息首先被应用程序拷贝到了操作系统内核协议栈，再通过发送窗口，拥塞窗口，以及发送缓冲区大小等条件进行发送。<br>也就是说我们不能假定一次SEND调用发送的数据或作为一个整体发送出去。</p><p>所以所谓的<strong>粘包</strong>问题应该被描述为：由于TCP是一个基于字节流的流式传输协议，所以不同的数据在一起进行传输的时候并没有明确的“界限”，需要人为的约定进行分割。</p><p>在实际场景中，HTTP 中的Content-Length就起了类似的作用，当接收端收到的消息长度小于 Content-Length 时，说明还有些消息没收到。那接收端会一直等，直到拿到了足量的消息或超时。<br>另外，为了解决标志位在消息体中存在的情况。 发送端在发送时还会加入各种校验字段（校验和或者对整段完整数据进行 CRC 之后获得的数据）放在标志位后面，在接收端拿到整段数据后校验下确保它就是发送端发来的完整数据</p><p>引用：<br>[1]: 什么是TCP粘包？怎么解决这个问题- 苍青浪- 博客园 <a href="https://www.cnblogs.com/cangqinglang/p/11503057.html">https://www.cnblogs.com/cangqinglang/p/11503057.html</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;首先要确定一个问题，什么是&lt;strong&gt;粘包&lt;/strong&gt;？下面是某博客关于&lt;strong&gt;粘包&lt;/strong&gt;的描述：&lt;/p&gt;
&lt;h4 id=&quot;“TCP粘包就是指发送方发送的若干包数据到达接收方时粘成了一包。”-1&quot;&gt;&lt;a href=&quot;#“TCP粘包就是指发送方发</summary>
      
    
    
    
    <category term="网络" scheme="http://rmchz.github.io/categories/%E7%BD%91%E7%BB%9C/"/>
    
    
    <category term="TCP" scheme="http://rmchz.github.io/tags/TCP/"/>
    
  </entry>
  
</feed>
